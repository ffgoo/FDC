//PM_sensor_i2clcd_01
#include <SoftwareSerial.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SoftwareSerial.h> 
SoftwareSerial BTSerial(6,7); // 소프트웨어 시리얼 (TX,RX) 
LiquidCrystal_I2C lcd(0x27,16,2);



byte buffer[1024]; // 데이터를 수신 받을 버퍼
int bufferPosition; // 버퍼에 데이타를 저장할 때 기록할 위치


int measurePin = 0; //Connect dust sensor to Arduino A0 pin
int ledPower = 2; //Connect 3 led driver pins of dust sensor to Arduino D2

int samplingTime = 280;
int deltaTime = 40;
int sleepTime = 9680;

float voMeasured = 0;
float calcVoltage = 0;
float dustDensity = 0;
float average_dustDensity = 0;

void setup(){
lcd.init();
lcd.backlight();
Serial.begin(9600);
pinMode(ledPower,OUTPUT);// 미세먼지 센서 내부 LED

Serial.begin(9600);
Serial.println("Hello!");  
BTSerial.begin(9600);
bufferPosition = 0; // 버퍼 위치 초기화
}

void loop() {
  while (BTSerial.available()){ 
    byte data = BTSerial.read();
    Serial.write(data);
  }  
  while (Serial.available()){
    byte data = Serial.read();
    BTSerial.write(data); 
  }
average_dustDensity = particleSensing();
  int average_dustDensity = analogRead(A0);
Serial.println(dustDensity);
BTSerial.println(dustDensity);
delay(1000);

// Serial.print("average_dustDensity = ");
// Serial.print("P");
if(dustDensity<41){
Serial.println(" => [Great(~40)]");
BTSerial.println(" => [Great(~40)]");
} else if(dustDensity>40 && dustDensity<140){
Serial.println(" => [Good(41~140)]");
BTSerial.println(" => [Good(41~140)]");
} else if(dustDensity>141 && dustDensity<200){
Serial.println(" => [Bad(141~200)]");
BTSerial.println(" => [Bad(141~200)]");
} else{
Serial.println(" => [Too Bad(201~)]");
BTSerial.println(" => [Too Bad(201~)]");
}


lcd.setCursor(3,0);
 lcd.print(dustDensity);
  lcd.print(" [ug/m3]");
lcd.println(average_dustDensity,DEC);
lcd.setCursor(0, 1);
if(dustDensity<31){
lcd.print(": Great(~40)");
} else if(dustDensity>40 && dustDensity<140){
lcd.print(": Good(41~140)");
} else if(dustDensity>141 && dustDensity<200){
lcd.print(": Bad(141~200)");
} else{
lcd.print(": Too Bad(201~)");
}
// Serial.write((int)average_dustDensity);
}

float particleSensing() {

digitalWrite(ledPower,LOW); // power on the LED
delayMicroseconds(samplingTime);
voMeasured = analogRead(measurePin);
delayMicroseconds(deltaTime);
digitalWrite(ledPower,HIGH); // turn the LED off
delayMicroseconds(sleepTime);

// 0 - 5V mapped to 0 - 1023 integer values
calcVoltage = voMeasured * (5.0 / 1024.0);
if( calcVoltage > 0.6 ) {
// linear eqn from http://www.howmuchsnow.com/arduino/airquality/
dustDensity =1000.0*( 0.172 * calcVoltage - 0.1);

// Serial.print("Digital Value(0-1023): ");
// Serial.print(voMeasured);

// Serial.print(" - V: ");
// Serial.print(calcVoltage);

// Serial.print(" - Density: ");
// Serial.println(dustDensity); // unit: ug/m3

delay(1000);

}
return dustDensity;
}//끝
