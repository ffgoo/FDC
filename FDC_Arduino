*  명령
 *  1.  g
 *  -> Go 전진 명령
 *  2.  b
 *  -> Back 후진 명령
 *  3.  l
 *  -> left 좌회전 명령
 *  4.  r
 *  -> right 우회전 명령
 *  5.  s
 *  -> stop 정지 명령
 *  6. a
 *  -> 자율 주행
 *  7. 1 
 *  -> Fan 작동
 *  8. 2
 *  -> Fan 정지
 *  
 *  
 */
#include <SoftwareSerial.h> // 시리얼 통신을 위한 라이브러리 선언

SoftwareSerial bluetooth(3,4); // 블루투스 통신을 위한 설정

void controllerByBTCommand(char szBTCmd);

int RightMotor_E_pin = 5;      // 오른쪽 모터의 Enable & PWM
int RightMotor_1_pin = 8;      // 오른쪽 모터 제어선 IN1
int RightMotor_2_pin = 9;     // 오른쪽 모터 제어선 IN2
int LeftMotor_3_pin = 10;      // 왼쪽 모터 제어선 IN3
int LeftMotor_4_pin = 11;      // 왼쪽 모터 제어선 IN4
int LeftMotor_E_pin = 6;      // 왼쪽 모터의 Enable & PWM

int E_carSpeed = 153; // 최대 속도의  60 % 
int prev_speed = 0;
 

#define CAR_DIR_FW  1   // 전진.
#define CAR_DIR_BW  2   // 후진.
#define CAR_DIR_LF  3   // 좌회전.
#define CAR_DIR_RF  4   // 우회전
#define CAR_DIR_ST  5   // 정지.
#define FAN_GO  6 
#define FAN_STOP  7 

char E_carDirection = 0;

void SmartCar_Go();
void SmartCar_Back();
void SmartCar_Stop();
void SmartCar_Left();
void SmartCar_Right();
void SmartCar_Update();
void Fan_Go();
void Fan_Stop();

void Servo_rotation1();
void Servo_rotation2();

int Edu_count =0;

void setup() {
  //FAN 제어
 pinMode(7, OUTPUT);
  // declare the ledPin as an OUTPUT:
  pinMode(RightMotor_E_pin, OUTPUT);        // 출력모드로 설정
  pinMode(RightMotor_1_pin, OUTPUT);
  pinMode(RightMotor_2_pin, OUTPUT);
  pinMode(LeftMotor_3_pin, OUTPUT);
  pinMode(LeftMotor_4_pin, OUTPUT);
  pinMode(LeftMotor_E_pin, OUTPUT);

  Serial.begin(9600); // PC와 아두이노간 시리얼 통신속도를 9600bps로 설정
  bluetooth.begin(9600); // 블루투스와 아두이노간 시리얼 통신속도를 9600bps로 설정
  
  digitalWrite(RightMotor_E_pin, HIGH);     // 오른쪽 모터의 Enable 핀 활성화
  digitalWrite(LeftMotor_E_pin, HIGH);
  digitalWrite(7, HIGH);// 왼쪽 모터의 Enable 핀 활성화
}


void loop() {
  char szRecvCmd = bluetooth.read();  // 블루투스 통신을 통한 명령 받기

  controllerByBTCommand(szRecvCmd);
  SmartCar_Update(); // 스마트카 상태 업데이트    
  
  if((Edu_count % 20) == 0){ 
      Edu_count = 0;
      delay(10);
  }
  else if((Edu_count % 10) == 0){   
      delay(10);
  }
  Edu_count++;  
}

// 제어명령을 실제로 수행하는 함수
void controllerByBTCommand(char szBTCmd)
{
  if (szBTCmd == '+') // 모터의 speed up
  {
    prev_speed = E_carSpeed;
    E_carSpeed += 20;
    E_carSpeed = min(E_carSpeed, 255);
    Serial.print("Speed Up ");
    Serial.println(E_carSpeed);
  }
  else
  if (szBTCmd == '-') // 모터의 speed down
  {
    prev_speed = E_carSpeed;
    E_carSpeed -= 20;
    E_carSpeed = max(E_carSpeed, 50);
    Serial.print("Speed down ");
    Serial.println(E_carSpeed);
  }
 
   else if(szBTCmd == '1') // 전진
    E_carDirection = FAN_GO;
    else if(szBTCmd == '2') // 전진
    E_carDirection = FAN_STOP;
  else if(szBTCmd == 'g') // 전진
    E_carDirection = CAR_DIR_FW;  
  else if(szBTCmd == 's') // 정지
    E_carDirection = CAR_DIR_ST;  
  else if(szBTCmd == 'b') // 후진
    E_carDirection = CAR_DIR_BW;    
  else if(szBTCmd == 'l')  // 좌회전
    E_carDirection = CAR_DIR_LF;    
  else if(szBTCmd == 'r')  // 우회전
    E_carDirection = CAR_DIR_RF;   
}

// 방향 전환에 따른 동작 명령 함수
void SmartCar_Update()
{
  if(E_carDirection == CAR_DIR_FW)  // 전진
    SmartCar_Go();
  else if(E_carDirection == CAR_DIR_BW) // 후진
    SmartCar_Back();
  else if(E_carDirection == CAR_DIR_LF) // 좌회전
    SmartCar_Left();
  else if(E_carDirection == CAR_DIR_RF) // 우회전
    SmartCar_Right();
  else if(E_carDirection == CAR_DIR_ST) // 정지.
    SmartCar_Stop();
    else if(E_carDirection == FAN_GO) // 정지.
    Fan_Go();
    else if(E_carDirection == FAN_STOP) // 정지.
    Fan_Stop();
}

// 스마트카 동작 함수들
void Fan_Go()
{
    digitalWrite(7, LOW);    

   
}
void Fan_Stop()
{
    digitalWrite(7, HIGH);    

    
}
void SmartCar_Go()  // 전진
{
    digitalWrite(RightMotor_1_pin, HIGH);    
    digitalWrite(RightMotor_2_pin, LOW);
    digitalWrite(LeftMotor_3_pin, HIGH);    
    digitalWrite(LeftMotor_4_pin, LOW);

    for(int i=prev_speed; i<=E_carSpeed; i=i+5){
      analogWrite(RightMotor_E_pin, i); 
      analogWrite(LeftMotor_E_pin, i);    
      delay(20); 
    }
    prev_speed = E_carSpeed;
}
void SmartCar_Back() // 후진
{
    digitalWrite(RightMotor_1_pin, LOW);    
    digitalWrite(RightMotor_2_pin, HIGH);
    digitalWrite(LeftMotor_3_pin, LOW);    
    digitalWrite(LeftMotor_4_pin, HIGH);

    for(int i=prev_speed; i<=E_carSpeed; i=i+5){
      analogWrite(RightMotor_E_pin, i); 
      analogWrite(LeftMotor_E_pin, i);    
      delay(20); 
    }
    prev_speed = E_carSpeed;
}
void SmartCar_Left()  // 좌회전
{
    digitalWrite(RightMotor_1_pin, HIGH);    
    digitalWrite(RightMotor_2_pin, LOW);
    digitalWrite(LeftMotor_3_pin, HIGH);    
    digitalWrite(LeftMotor_4_pin, LOW);
        
    for(int i=prev_speed; i<=E_carSpeed; i=i+5){
      analogWrite(RightMotor_E_pin, i*1.4);             // 140%
      analogWrite(LeftMotor_E_pin, i*0.2);              // 20%
      delay(50); 
    }
    prev_speed = E_carSpeed;
}
void SmartCar_Right() // 우회전
{
    digitalWrite(RightMotor_1_pin, HIGH);    
    digitalWrite(RightMotor_2_pin, LOW);
    digitalWrite(LeftMotor_3_pin, HIGH);    
    digitalWrite(LeftMotor_4_pin, LOW);
    
    for(int i=prev_speed; i<=E_carSpeed; i=i+5){
      analogWrite(RightMotor_E_pin, i*0.2);             // 20%
      analogWrite(LeftMotor_E_pin, i*1.4);              // 140%
      delay(50); 
    }  
    prev_speed = E_carSpeed;
}
void SmartCar_Stop()  // 정지
{
    if(E_carDirection == CAR_DIR_FW || E_carDirection == CAR_DIR_LF || E_carDirection == CAR_DIR_RF){
      for(int i=E_carSpeed; i>=0; i=i-5){
        analogWrite(RightMotor_E_pin, i);  
        analogWrite(LeftMotor_E_pin, i);
        delay(20); 
      }
    }else if(E_carDirection == CAR_DIR_BW){
      for(int i=E_carSpeed; i>=0; i=i-5){
        analogWrite(RightMotor_E_pin, i);  
        analogWrite(LeftMotor_E_pin, i);
        delay(20); 
      }
    }
    digitalWrite(RightMotor_E_pin, LOW); // 정지
    digitalWrite(LeftMotor_E_pin, LOW);
}
